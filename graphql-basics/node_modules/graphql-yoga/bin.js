#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const yargs = _interopDefault(require('yargs'));
const helpers = require('yargs/helpers');
const graphqlConfig = require('graphql-config');
const codeFileLoader = require('@graphql-tools/code-file-loader');
const node = require('@graphql-yoga/node');
const mock = require('@graphql-tools/mock');

const terminateEvents = ['SIGINT', 'SIGTERM'];
function registerTerminateHandler(callback) {
    for (const eventName of terminateEvents) {
        process.on(eventName, () => callback(eventName));
    }
}
const YogaExtensions = (api) => {
    const codeFileLoader$1 = new codeFileLoader.CodeFileLoader({
        noPluck: true,
    });
    api.loaders.schema.register(codeFileLoader$1);
    api.loaders.documents.register(codeFileLoader$1);
    return {
        name: 'Yoga',
    };
};
function graphqlYoga() {
    return yargs(helpers.hideBin(process.argv)).command('$0', 'Serves GraphQL over HTTP using your GraphQL Config', (builder) => {
        builder.option('project', {
            type: 'string',
            description: 'Project name',
        });
        builder.option('mock', {
            type: 'boolean',
            description: 'Mock the given schema',
        });
    }, async ({ project = 'default', mock: mock$1 }) => {
        console.info(`Loading GraphQL Config from ${process.cwd()}`);
        const config = await graphqlConfig.loadConfig({
            extensions: [YogaExtensions],
            throwOnMissing: false,
            throwOnEmpty: false,
        });
        console.log(`Loading project: ${project}`);
        const projectConfig = config === null || config === void 0 ? void 0 : config.getProject(project);
        console.log(`Loading GraphQL Schema of ${project}`);
        let schema = await (projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.getSchema());
        if (!schema) {
            console.warn(`Could not find schema for project ${project} fallback to default schema`);
        }
        if (mock$1) {
            if (!schema) {
                console.warn('No schema found for mocking. Skipping mocking.');
            }
            else {
                console.log(`Adding mocks to the schema`);
                schema = mock.addMocksToSchema({ schema });
            }
        }
        console.log(`Building GraphQL Server`);
        const graphQLServer = node.createServer({
            schema,
        });
        console.log(`Starting GraphQL Server`);
        await graphQLServer.start();
        registerTerminateHandler(() => {
            graphQLServer.stop();
        });
    }).argv;
}

try {
    graphqlYoga();
}
catch (e) {
    console.error(e);
    process.exit(1);
}
